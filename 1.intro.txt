what is kubernetes
https://github.com/wardviaene/kubernetes-course


kubernetes is open source orchestration system for docker container 
-- it let you schedule container on a cluster of machine
-- you can run multiple container on one machine -- multiple make a cluster
-- you can run long running services ( like web apps )
-- kubernetes manage statte of these container
	-- can start the container on specific nodes
	-- k8 restart container when it get kills
	-- can move containers from one node to another nodes
	
	
/// if main server is in maintainance we can move to another node

instead of just running a few docker container on one host manually 
kubernetes is a platform that will manage the container for you
kubernetes cluster can start with one node with thousands of nodes
some of the populer docker orchestration are

-- docker swarm
-- mesos

/// advantages of k8 
run kubernetes on anywhere
-- on premise ( own datacenter )
-- public ( aws , google cloud .. )
-- hybrid ( public / private ) -- manage workloads on diff side

--highly modular
-- open source
-- great communitu
-- backed by google



/////////////////////////// VM AND CONTAINER ///////////////////////////
VM

server ( physical machine )
host os ( windows / linux )
hyperviser ( manage multiple os )
os      | os       | os       | virtual machines
bin/lib | bin/ lib | bin/lib  | virtual machines
app1    | app2     | app3     | virtual machines



CONTAINER
server ( physical machine )
host os ( windows / linux )
docker engine
bin/lib  |  bin/lib | container
app1 | app2 | app3  | container



CONTAINER ON CLOUD
server ( physical machine )
host os ( windows / linux )
HYPERVISER - MANAGE OS
GUEST OS - RUN MULTIPLE OS 
docker engine
bin/lib  |  bin/lib | container
app1 | app2 | app3  | container

Docker most  populer container softwere
-- alternatev to docker is rkt  -  which works with kubernetes
-- Docker enginer
	-- the docker runtime
	-- softwere to make and run docker images
-- Docker hub
	-- online service to store and fetch docker images
	-- build and store images using enginer store online publicky and private | not build on pc we can use online service to do that build
-- other docker hubs 
	-- aws -- own saprate repo to manage images
	
-- docker benefites
isolation:- ship binaries with dependencies
	-- work any machine
	-- QA , DEV , PROD
	-- docker makes dev teams able to ship faster
	-- run same image on multiple os and clouds
	-- docker uses linux kernal 
	
	
////////////////////////// KUBERNETES SETUP /////////////////////////

more integrations available for cloud providers like AWS,Google Cloude, azure 
-- things like volumes and external load balancer work only with supported cloud providers
-- look for cloud provider plugins which is suppoerted

--minikube -- spinup local machine with kubernetes cluster
-- spinup kubernetes cluster on AWS using kops
-- kops used to spin up high available prod cluster

-- doing hands on as much as possible
https://www.digitalocean.com/

//////////////////////////////////// MINIKUBE SETUP for non prod server ////////////////////////////////////////
https://github.com/kubernetes/minikube
dawnload vmwere and virtual box

dawnload repo and unzip and run below commands

MINIKUBE 	
	-- is a toool makes it easy to run kubernetes localy
	-- minikube runs as a single node kubernetes cluster inside vm
	-- it is aimes is to run for testing and developement
	-- it cannot spinup prod cluster
	-- it is one node machine with no high availablity
	
to lanch cluster in windows powershell / linux shell 
-- type 
minikube start


//////////////////////////////////// setup minikube commands ////////////////////////////////////////

visit
https://github.com/kubernetes/minikube

goto tags and relese tab and dawnload or dawnload using package manager
-- sometime it not works

//////////////////////////////////// setup local kubernetes using docker client //////////////////////////////////

dawnload edge commnuity version | not stable

https://docs.docker.com/desktop/windows/install/

https://docs.docker.com/desktop/mac/install/

dawnload and enable kubernetes on mac os 


-- kubectl get nodes
-- kubectl config get-contexts
-- kubectl config use-context <choose NAME HERE>

# run demo images
kubectl run hello-kubernetes --image=k8s.gcr.is/echoserver:1.4 --port=8080
kubectl expose deployment hello-kubernetes --type=NodePort
kubectl get service hello-kubernetes

open browser and type port 
http:localhost:65468


## if above steps work correcly kubernetes cluster setups is working correcly

////////////////////// kubenetes setup on production cluster ////////////////////////////////
minikube vs dcoker client vs kops vs kubeadm

-- there are multiple tools to install  a kubernetes cluster
-- minikube and docker client are used for local cluster setup but not in real cluster
-- kops and kubeadm are tools to spinup production cluster

-- on AWS 
-- best tool is kops
-- on AWS EKS ( hosted kubernetes ) will be available , at that point this will be probbly be the preffered options

###### for other install or if you cannot get kops to work you can use kubeadm 

-- kubeadm is an alternatev approch 
-- kops is recommended  ( on AWS ) you also have AWS integration with kops automatically

kubeadm with digitalocean cluster setup 


////////////////////// kubenetes setup setup kubernetes on aws /////////////////////////////


CLOUD SETUP

to setup k8 on AWS use tools is kops
kops stands for kubernetes operations

-- tools allows you to do production grand installation upgrade and manage
-- we use this tool to setup k8 cluster on aws

-- there is another lagecy tool called kube-up.shell
-- this was simple tool to bring up cluster but it is now depreceted it dosent create production ready environment

-- kops works on mac and linux
-- in windows we need to boot machine using virtual box and load linux os
-- we can use vagrant to quickly bootup a linux box

cd:\ mkdir ubuntu
cd:\ cd ubuntu
cd:\ubuntu\ vagrant init ubuntu/xenial64
cd:\ubuntu\ vagrant up

vagrant ssh-config

login into vagrant server run below commands
vagrant ssh

///////////////////////////// 10. KUBERNETES setup on AWS //////////////////////////////////

##login into vagrant server 
vagrant ssh

##run below commands

goto latest relese and dawnload
https://github.com/kubernetes/kops

kops-linux-arm64

on server wget https://github.com/kubernetes/kops/releases/download/v1.23.1/kops-linux-arm64

chmod +x kops-linux-arm64

mv kops-linux-arm64 /usr/local/bin/

## python allows us to setup aws command lines to machines
sudo apt-get install python-pip

## then install aws client
sudo pip install awscli

## aws command line utility | create and link aws account to use aws utility
aws

### goto aws.amazon.com create free account and config somethings watch video 10 - intro to kubenetes folder
-- setup domain and user


## to access kops create user on aws 
## goto >> services >> search box >> iam ( manage access to aws resource )
>> left side click on users >> add user >> give username kops >> aws access type >> programatic access

goto >> attach existing permissions directly tab >> administrator access >> no tags used >> review >> crate user 
username kops
access key id >> aknwdiounapwodaoamdpoa
secret access key >> ldjkandwuoniod

goto aws cli terminal
aws configure 
enter aws access id: aknwdiounapwodaoamdpoa
enter aws secret access key: ldjkandwuoniod
default region name:
default output format:

ls -alh ~/.aws/
.
..
config
credentials


## goto below website shows you the cloud which is nearest to you to use
https://www.cloudping.info/


### STORAGE AND CONTENT DELIVERY
in aws S3 is like storage drive like google drive

goto create bucket:- give bucket name:- kops-state-1212
>> choose Region:mumbai using cloudping server which has less ping | where to deploy cluster onwhich region >> create 


## set DNS | in aws goto search type networking Route53 | scalable  DNS and domain name registration
-- kops is also setup dns | we need main and subdomain to register in aws use Route53 
-- ROUTE53 helps to setup dns management
  -- enter sub domain 
  -- first need to create zone to Route53 so kops can manage for you
  -- we can use freenom.com to get free domain created first or use aws domain registeration
  -- we hve domain then goto DNS management
	-- goto >> create hosted zone | cost money on ws or use minikube for free
	>> create hosted zone : test.tk >> press create >> it create list of name servers we need toconfigure in freename nameserver blanks
	>> we use tosetup nameserver for main and subdomains
	
## once it is done kops manage dns for us using ROUTE53
## finally all prepration is done we can use the aws cluster using kops


///////////////////// 11. DNS troubulshooting /////////////////////
kops need dns to work cluster properly 

## sudo apt install bind9-host 

## to make sure nameserver and properly set to domains | check below 
host -t NS anydomain.com 
ns1
ns2
ns3
ns4

if above command host -t NS anydomain.com is not give output someting is miss or not configured properly | on aws Route53 for zone check
or something is not working

///////////////////// 12. DEMO cluster setup on aws using kops //////////////////

after the kubectl installed on server
wget url - to - dwonload - kubectl
sudo mv kubectl /usr/local/bin/
chmod 777 /usr/local/bin/kubectl
kubectl


## create ssh keys for cluster to login into cluster
~ ssh-keygen -f .ssh/id_rsa

## below keys will be upload to instance 
cat .ssh/id_rsa.pub 

## rename kops binary
sudo mv /usr/local/bin/kops-linux-arm64 /usr/local/bin/kops

## kops command execute on server | create one t2 micro master and 2 nodes t2 micro

##                  specify dns name specify in route53
kops create cluster --name=kubernetes.com --state=s3://kops-state-1212 --zone=eu-west-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.com

##                 finally configure cluster and lanch cluster
kops update cluster kubernetes.com --yes

##                  edit cluster
kops edit cluster kubernetes.com --state=s3://kops-state-1212


## lancher cluster 
kops update cluster kubernetes.com --yes --state=s3://kops-state-1212


## Cluster is Ready lets check

cat /home/ubuntu/.kube/config

## check nodes
kubectl get nods

## NOTE:- new kubernetes version  will start  a pod insted of deployment 
kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4
## expose externally use Loadbalancer and Node port and expose command with port
kubectl expose deployment hello-minikube --type=NodePort --port=8080


### CREATE AUTO SCALLING GROUP FOR MASTER AND WORKER
-- IF SOMETHING GOSE WRONG IT RELANCE SERVER INSTANCES

## open ports to expose service outside
goto >> any worker server >> in below security group >> view inbound group >> open nodeport service >> by default 22 is open
click on nodes.kubernetes.com >>  goto inboud tab >> edit >> add rule
custom tcp | TCP | 30032 | myip | then save


### LETS delete cluster
kops delete cluster kubernetes.com --state=s3://kops-state-1212 --yes 


/////////////////////////////// 13 . build docker images ////////////////////////////////////////
building container
build own app in docker

local cluster running in in minikube | on aws is kops 

To build container . use docker Engine
dawnload Docker Engine for Windows ,  Linux , Macos

Need simple Dockerfle  which point and add local setup into docker image

From
WORKDIR -- create directory in container /app
ADD ./app -- currentfiles are copied to /app
RUN npm install -- eecute certain commands  related to images to execute dependencies and package file
EXPOSE 3000 -- port to see running applications
CMD npm start -- 


-- To build this project docker build can be used
-- docker build can be executed  manually or by ci/cd softwere like jenkins
-- after the docker images we can run images into cotainer

//////////////////////////////// 14. demo building docker images ////////////////////////////////////
your own docker images

sudo apt-get install docker.io
sudo apr-get install git

git clone https://github.com/wardviaene/docker-demo

cd /docker-demo

## add ubuntu user to docker group
sudo usermod -G docker ubuntu

vagrant ssh

docker build .

## --it interactive mode
docker run -p 3000:3000 -it 9812ee12bjn

## run below command in new tab 
curn localhost:3000

/////////////////////////////// 15. docker registry /////////////////////////////
## Run docker app  locally
docker run 

## to make images available to kubernetes	we need to push image to docker registry like docker hub
connect docker hub
push docker image locally to Docker registery to store images

docker login
docker tag imageid kishankp/image-name:latest
docker push docker tag imageid kishankp/image-name

OR 

immidately tag and give name during build process
cd docker-demo

docker build -t kishankp/image-name .

dcoker push kishankp/image-name

--- build and deploy any applications you want using docker and kubernetes 
-- you shoud only run one process in one container
-- dont try to create one gient docker images for your app / splite it up if neccessary
-- all the data in the container is not preserved , when cotainer stops all the data and changes within container is lost
-- you can preserve the data using volumes 
-- for more tips chekkout the 12factor.net

few official images are available for own app
nginx
php
python
ruby
nodejs
java
//////////////////////// 17. run app on k8 ///////////////////////

Lets run our newly built app on the new kubernetes cluster

before we can lanch a container based on the image , we need to create pod defination

-- pod describe  an applications running on kubernetes
-- pod can contain one or more tighly coupled containers that make up the app
-- those app can easily communicate which each other using local ports
-- our app has one container

-- to make this app running on kubernetes cluster
create pod-hello.yml with pod defination

use kubectl to create pod on kubernetes cluster
kubectl -f path-to-yml


///////////////// USEFUL COMMANDS /////////////////
## get information about all running pods
  kubectl get pods 
  
## describe one pod
  kubectl describe pod <podname>

## expose the port of pod ( creates a new service )
  kubectl expose pod <pod>  --port=4444 --name=frontend
  
## port forward the exposed pod port to your local machine | on local machine goto that port and port forward to that port
  kubectl port-forward 	<pod> 8080
  
## attach to the pod | to see that is running in pods
  kubectl attach <podname> -i 

## execute commands on pods | which execute command on conainer
  kubectl exec <pod> --command

## execute command on specific container using -c and pod id
  kubectl exec -c <podid, podid,...> 
  
## add new label after pod created 
  kubectl label pods <pod> mylabel=awasome
  
## Run a shell in pod -- very useful in debugging | using busybox image which is small in size it can start your shell | when we are in shell we can debug anything easily | bcuz then we are in new pod and it can connect to other pod which may be not functioning
  kubectl run -i --tty busybox --image=busybox --restart=Never --sh
                       <image>
